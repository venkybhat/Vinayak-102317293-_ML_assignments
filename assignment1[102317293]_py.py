# -*- coding: utf-8 -*-
"""Assignment1[102317293].py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RXlyw2Tg8yl75uXlsBwZVcikN_lkAMkI

Q1: Questions on Basic NumPy Array
(a) Reverse the NumPy array: arr = np.array([1, 2, 3, 6, 4, 5])

(b) Flatten the NumPy arr: array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]]) using any two NumPy in-built methods

(c) Compare the following numpy arrays:

arr1 = np.array([[1, 2], [3, 4]])

arr2 = np.array([[1, 2], [3, 4]])

(d) Find the most frequent value and their indice(s) in the following arrays:

i. x = np.array([1,2,3,4,5,1,2,1,1,1])

ii. y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ])

(e) For the array gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]'), find

i. Sum of all elements

ii. Sum of all elements row-wise

iii. Sum of all elements column-wise

(f) For the matrix: n_array = np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]]), find

i. Sum of diagonal elements

ii. Eigen values of matrix

iii. Eigen vectors of matrix

iv. Inverse of matrix

v. Determinant of matrix

(g) Multiply the following matrices and also find covariance between matrices using NumPy:

i. p = [[1, 2], [2, 3]]

q = [[4, 5], [6, 7]]

ii. p = [[1, 2], [2, 3], [4, 5]]

q = [[4, 5, 1], [6, 7, 2]]
(h) For the matrices: x = np.array([[2, 3, 4], [3, 2, 9]]); y = np.array([[1, 5, 0], [5, 10, 3]]), find inner, outer and cartesian product?
"""

#Q1a
import numpy as np
arr = np.array([1,2,3,6,4,5])
arr=arr[::-1]
print(arr)

#Q1b
import numpy as np
arr1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
arr1.reshape(-1)

#Q1c
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
print(arr1==arr2)

#Q1d
import numpy as np
x=np.array([1,2,3,4,5,1,2,1,1,1])
y=np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])

uni_val, counts = np.unique(x, return_counts=True)
freq_idx = np.argmax(counts)
freq_val = uni_val[freq_idx]
print(freq_val)

uni_val, counts = np.unique(y, return_counts=True)
freq_idx = np.argmax(counts)
freq_val = uni_val[freq_idx]
print(freq_val)

#Q1e
import numpy as np
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
tot_sum=np.sum(gfg)
print(tot_sum)

col_sum=np.sum(gfg,axis=0)
print(col_sum)

row_sum=np.sum(gfg,axis=1)
print(row_sum)

#Q1f
import numpy as np
arr=np.array([[55, 25, 15],[30, 44, 2],[11, 45, 77]])

d_s = np.trace(arr)
print("diagonal", d_s)

e_val = np.linalg.eigvals(arr)
print("eigenvals", e_val)

e_val, e_vecs = np.linalg.eig(arr)
print("eigenvectr", e_vecs)

invt = np.linalg.inv(arr)
print("invt mat", invt)

deter = np.linalg.det(arr)
print("DOM", deter)

#Q1g
import numpy as np
p1 = np.array([[1, 2], [2, 3]])
q1 = np.array([[4, 5], [6, 7]])

pro = np.dot(p1, q1)
print(pro)

cov1 = np.cov(p1.flatten(), q1.flatten())
print(cov1)

p2 = np.array([[1, 2], [2, 3], [4, 5]])
q2 = np.array([[4, 5, 1], [6, 7, 2]])

pro2 = np.dot(p2, q2)
print(pro2)

cov2 = np.cov(p2.flatten(), q2.flatten())
print(cov2)

#Q1h
import numpy as np
import itertools

x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])


innnn = np.inner(x, y)
print("inner_pro", innnn)


outttt = np.outer(x.flatten(), y.flatten())
print("outer_pro", outttt)


c_p = np.array(list(itertools.product(x.flatten(), y.flatten())))
print("cartisean", c_p)

"""Q2: Based on NumPy Mathematics and Statistics (a) For the array: array = np.array([[1, -2, 3],[-4, 5, -6]])

i. Find element-wise absolute value

ii. Find the 25th, 50th, and 75th percentile of flattened array, for each column, for each row.

iii. Mean, Median and Standard Deviation of flattened array, of each column, and each row

(b) For the array: a = np.array([-1.8, -1.6, -0.5, 0.5,1.6, 1.8, 3.0]).

Find floor, ceiling and truncated value, rounded values




"""

#Q2a
import numpy as np

arr = np.array([[1, -2, 3], [-4, 5, -6]])

abs_arr = np.abs(arr)
print("abs values", abs_arr)

flat = arr.flatten()
p_flat = np.percentile(flat, [25, 50, 75])
p_col = np.percentile(arr, [25, 50, 75], axis=0)
p_row = np.percentile(arr, [25, 50, 75], axis=1)

print("Percentiles (Flattened)25%", p_flat[0], "50%", p_flat[1], "75%", p_flat[2])
print("Percentiles (Columns)", p_col)
print("Percentiles (Rows)", p_row)


mean_f = np.mean(flat)
med_f = np.median(flat)
std_f = np.std(flat)

mean_c = np.mean(arr, axis=0)
med_c = np.median(arr, axis=0)
std_c = np.std(arr, axis=0)

mean_r = np.mean(arr, axis=1)
med_r = np.median(arr, axis=1)
std_r = np.std(arr, axis=1)

print("flatt mean:", mean_f, "Median:", med_f, "std", std_f)
print("colwise mean:", mean_c, "Median:", med_c, "std", std_c)
print("rowwise mean:", mean_r, "Median:", med_r, "std", std_r)


#Q2b
a = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])

print("floored", np.floor(a))
print("ceil", np.ceil(a))
print("truncated", np.trunc(a))
print("rounded", np.round(a))

"""Q3: Based on Searching and Sorting

(a) For the array: array = np.array([10, 52, 62, 16, 16, 54, 453]), find

i. Sorted array

ii. Indices of sorted array

iii. 4 smallest elements

iv. 5 largest elements

(b) For the array: array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0]), find

i. Integer elements only

ii. Float elements only
"""

#Q3 a
import numpy as np

nums = np.array([10, 52, 62, 16, 16, 54, 453])

srt_num = np.sort(nums)
print("Sorted:", srt_num)

pos = np.argsort(nums)
print("sorted indexes", pos)

small_4 = srt_num[:4]
print("4 smallest:", small_4)

large_5 = srt_num[-5:][::-1]
print("5 largest:", large_5)


#Q3b
arrayy = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])

ints = arrayy[arrayy == arrayy.astype(int)]
print("integers only", ints)

floats = arrayy[arrayy!= arrayy.astype(int)]
print("floats only", floats)

"""Q4:
(a) Write a function named img_to_array(path) that reads an image from a specified path and
save it as text file on local machine? (Note: use separate cases for RGB and Grey Scale
images)
(b) Load the saved file into jupyter notebook?
"""

#Q4a
from PIL import Image
import numpy as np

def img_to_array(path):
    pic = Image.open(path)
    data = np.array(pic)

    if len(data.shape) == 2:
        print("ðŸ–¤ Grayscale image found.")
        np.savetxt("gray_image.txt", data, fmt='%d')
        print("Saved as gray_image.txt")

    elif len(data.shape) == 3 and data.shape[2] == 3:
        print("ðŸŒˆ RGB image found.")
        r, g, b = data[:, :, 0], data[:, :, 1], data[:, :, 2]
        np.savetxt("rgb_red.txt", r, fmt='%d')
        np.savetxt("rgb_green.txt", g, fmt='%d')
        np.savetxt("rgb_blue.txt", b, fmt='%d')
        print("Saved as rgb_red.txt, rgb_green.txt, rgb_blue.txt")

    else:
        print("Unknown image format.")

#Q4b
import numpy as np

try:
    gray_img = np.loadtxt("gray_image.txt")
    print("Loaded grayscale array:\n", gray_img)
except:
    print("Could not load gray_image.txt")

try:
    r = np.loadtxt("rgb_red.txt")
    g = np.loadtxt("rgb_green.txt")
    b = np.loadtxt("rgb_blue.txt")

    rgb_img = np.stack((r, g, b), axis=2).astype(np.uint8)
    print("Loaded RGB array with shape:", rgb_img.shape)
except:
    print(" Could not load one or more RGB files")